component mc_linear_w_T
% Linear Moving Coil Speaker with thermal model
%   Simple model for a moving coil speaker including
%     Electrical resistance and inductance
%     Electromechanical (BL) converter
%     Mechanical mass, stiffness and damping
%     Mechanoacoustical conversion (area transformer) to acoustical domain
%     Optional
%       Electrical R2 and L2 to partially model eddy current effects
% Custom documentation:  <a href="matlab:web('http://www.sctacoustics.com')">Test Link</a>  
%
% For more information, see <a href="matlab:
% web('https://www.mathworks.com')">the MathWorks Web xxx site</a>.
%
% For more information, see <a href="matlab:
% web('http://sctacoustics.com')">the SCT Acoustics Web site</a>.
%
% For more information, see <a href="matlab:
% web('http/test.html')">the SCT Acoustics Web site</a>.
%
% For more information, see <a href="matlab:
% web('test.html')">the SCT Acoustics Web site</a>.
%

  parameters
    Re = {7.8, 'Ohm'}; %Resistance Re
    l = {1.24, 'mH'}; %Inductance Le
    R2L2 = acoustical.enum.R2L2.simple; % Include R2 and L2?
    R2 = {3.52, 'Ohm'}; % Resistance R2
    L2 = {0.84, 'mH'}; % Inductance L2
    mass = {4.8, 'g'}; %Mass
    Sd = {30.4, 'cm^2'}; %Cone area
    Rm = {0.1, 'N*s/m'}; %Mechanical Resistance
    BL = {5.34, 'N/A'}; %Force Constant BL
    K = {1000, 'N/m'}; %Spring stiffness
    MechPort  = acoustical.enum.WithMechanicalPort.noPort; % Include Mechanical mounting port?
    ThermPort = acoustical.enum.WithThermalPort.noPort; % Include Thermal port?
    Tref      = {293.15, 'K'}; % Reference temperature
    Tcap_coil = {1., 'J/K'};   % Thermal capacity of coil
    alpha     = {50e-6, '1/K'};   % Temperature coefficient of coil
    Rt1       = {1., 'K/W'};   % First thermal resistance
    Tcap_mag  = {1., 'J/K'};   % Thermal capacity of magnets
    Rt2       = {1., 'K/W'};   % Second thermal resistance
  end
  if ThermPort == acoustical.enum.WithThermalPort.noPort
      annotations
          [Tref, ...
           Tcap_coil, ...
           alpha, ...
           Rt1, ...
           Rt2, ...
           Tcap_mag] : ExternalAccess=none;
      end
  end
  outputs
      Disp  = {0, 'm'}; % Disp
      Tcoil = {293.15,'K'}; % Tcoil
      Tmag =  {293.15,'K'}; % Tmag
  end
  if ThermPort == acoustical.enum.WithThermalPort.withPort
      % outputs
      %   Tcoil = {300., 'K'}; % Tcoil
      %   Tmag  = {300., 'K'}; % Tmag
      % end
      nodes(ExternalAccess=none)
        Hcoil  = foundation.thermal.thermal; % Hcoil:left
        Hmag   = foundation.thermal.thermal; % Hmag:right
      end
  end
  if R2L2 == acoustical.enum.R2L2.simple
      annotations
          [R2,L2] : ExternalAccess=none;
      end
  end
  nodes
    a0 = acoustical.acoustical; %cone_front:right
    a1 = acoustical.acoustical; %cone_back:right
    e0 = foundation.electrical.electrical; %e+:left
    e1 = foundation.electrical.electrical; %e-:left
    M  = foundation.mechanical.translational.translational; % Mech
  end
  annotations
      [M]      : Side = bottom;
      [a0]     : Side = right;
      [a1]     : Side = bottom;
      [e0, e1] : Side = left;
      [Disp]   : Side = top;
      [Tcoil]  : Side = top;
      [Tmag]   : Side = top;
      UILayout = [UIGroup("Parameters", Re, l, mass, K, Rm, Sd, BL, ...
                                        R2L2, R2, L2, MechPort, ThermPort), ...
                  UIGroup("Thermal", Tref, Tcap_coil, alpha, Rt1, Tcap_mag, Rt2) ];
  end
  if MechPort == acoustical.enum.WithMechanicalPort.noPort
      annotations
          [M] : ExternalAccess=none;
      end
  end
  if ThermPort == acoustical.enum.WithThermalPort.noPort
      annotations
          [Tcoil,Tmag] : ExternalAccess=none;
      end
  end
  components(ExternalAccess = observe)
    Translational_Spring = foundation.mechanical.translational.spring(spr_rate = K);
    Translational_Electromechanical_Converter = foundation.electrical.elements.translational_converter(K = BL);
    Translational_Damper = foundation.mechanical.translational.damper(D = Rm);
    Mechanical_to_Acoustical_Converter_area_transformer = acoustical.elements.mechanical_converter(Sd = Sd);
    Mechanical_Translational_Reference = foundation.mechanical.translational.reference;
    Mass = foundation.mechanical.translational.mass(mass = mass);
    Inductor = foundation.electrical.elements.inductor(g = {1e-09, '1/Ohm'}, r = {0, 'Ohm'}, l = l);
    Ideal_Translational_Motion_Sensor = foundation.mechanical.sensors.velocity(offset = {0, 'm'});
    PS_Terminator = foundation.signal.sinks.terminator;
  end
  if R2L2 == acoustical.enum.R2L2.withR2L2
      components
          Resistor1 = foundation.electrical.elements.resistor(R = R2);
          Inductor1 = foundation.electrical.elements.inductor(r = {0, 'Ohm'}, g = {1e-09, '1/Ohm'}, l = L2);
      end
  end
  if ThermPort == acoustical.enum.WithThermalPort.noPort
      components
          Resistor = foundation.electrical.elements.resistor(R = Re);
      end
  else
      components
          Resistor  = foundation.electrical.elements.thermal_resistor(R0 = Re, tc = {1,'s'}, K_d = Tcap_coil/{1,'s'}, alpha = alpha);
          ThermRes1 = foundation.thermal.elements.resistance(resistance = Rt1);
          ThermRes2 = foundation.thermal.elements.resistance(resistance = Rt2);
          ThermCap  = foundation.thermal.elements.mass(mass = {1,'kg'}, sp_heat = Tcap_mag/{1,'kg'});
          T_ref     = foundation.thermal.sources.temperature(temperature = Tref);
      end
  end
  connections
    connect(Ideal_Translational_Motion_Sensor.V,PS_Terminator.I);
    connect(Ideal_Translational_Motion_Sensor.P,Disp);
    connect(e1,Translational_Electromechanical_Converter.n);
    connect(e0,Resistor.p);
    connect(a1,Mechanical_to_Acoustical_Converter_area_transformer.nn);
    connect(Mass.M,Mechanical_to_Acoustical_Converter_area_transformer.R);
    connect(Mass.M,Translational_Damper.R);
    connect(Mass.M,Translational_Electromechanical_Converter.R);
    connect(Mass.M,Translational_Spring.R);
    connect(Ideal_Translational_Motion_Sensor.R,Mass.M);
    connect(a0,Mechanical_to_Acoustical_Converter_area_transformer.pp);
    connect(Inductor.p,Resistor.n);
    connect(M,Mechanical_to_Acoustical_Converter_area_transformer.C);
    connect(M,Translational_Damper.C);
    connect(M,Translational_Electromechanical_Converter.C);
    connect(M,Translational_Spring.C);
    connect(M,Ideal_Translational_Motion_Sensor.C);
  end
  if R2L2 == acoustical.enum.R2L2.simple
      connections
        connect(Inductor.n,Translational_Electromechanical_Converter.p);
      end
  else
      connections
        connect(Inductor.n, Resistor1.p, Inductor1.p);
        connect(Resistor1.n,Inductor1.n,Translational_Electromechanical_Converter.p);
      end
   end
   if MechPort == acoustical.enum.WithMechanicalPort.noPort;
      connections
          connect(M,*);
      end
   end
   if ThermPort == acoustical.enum.WithThermalPort.withPort
     connections
         connect(Resistor.H, Hcoil, ThermRes1.A);
         connect(ThermRes1.B, Hmag, ThermCap.M, ThermRes2.A);
         connect(ThermRes2.B, T_ref.A); 
     end
     equations
         Tcoil == Resistor.H.T;
         Tmag  == ThermCap.M.T;
     end
   else
       equations
           Tcoil == 0;
           Tmag  == 0;
       end
   end

end
